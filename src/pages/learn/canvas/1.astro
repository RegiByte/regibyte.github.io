---
import MainHead from '../../../components/MainHead.astro';
import Footer from '../../../components/Footer/index.jsx';
import Nav from '../../../components/Nav/index.jsx';
---

<html lang="en">
<head>
  <MainHead title="About | Jeanine White" description="About Jeanine White Lorem Ipsum"/>
  <style lang="scss">
    #canvas {
      height: 100%;
      width: 100%;
      position: absolute;
      top: 0;
      left: 0;
      z-index: -10;
      background: black;
    }
  </style>
</head>
<body>
<Nav/>
<div class="overflow-y-auto overflow-x-hidden">
  <canvas id="canvas"/>
</div>

<script>
  let canvas
  let ctx
  let flowField
  let flowFieldAnimation

  window.onload = function () {
    canvas = document.getElementById('canvas')
    ctx = canvas.getContext('2d')
    canvas.width = window.innerWidth
    canvas.height = window.innerHeight
    flowField = new FlowFieldEffect(ctx, canvas.width, canvas.height)
    flowField.animate(0)
  }

  window.addEventListener('resize', () => {
    cancelAnimationFrame(flowFieldAnimation)

    canvas.width = window.innerWidth
    canvas.height = window.innerHeight

    flowField = new FlowFieldEffect(ctx, canvas.width, canvas.height)
    flowField.animate(0)
  })

  const mouse = {
    x: 0,
    y: 0
  }

  window.addEventListener('mousemove', event => {
    mouse.x = event.x
    mouse.y = event.y
  })

  class FlowFieldEffect {
    #ctx;
    #width
    #height

    constructor(ctx, width, height) {
      this.#ctx = ctx
      this.#ctx.lineWidth = 1
      this.#width = width
      this.#height = height
      this.lastTime = 0
      this.interval = 1000 / 60
      this.timer = 0
      this.cellSize = 10
      this.gradient
      this.#createGradient()
      this.#ctx.strokeStyle = this.gradient
      this.radius = 5
      this.radiusVelocity = 0.03
    }

    #createGradient() {
      this.gradient = this.#ctx.createLinearGradient(0, 0, this.#width, this.#height)
      this.gradient.addColorStop("0.1", "#ff5c33")
      this.gradient.addColorStop("0.2", "#ff66b3")
      this.gradient.addColorStop("0.4", "#80ff80")
      this.gradient.addColorStop("0.6", "#b3ffff")
      this.gradient.addColorStop("0.8", "#ccccff")
      this.gradient.addColorStop("0.9", "#ffff33")
    }

    #drawLine(angle, x, y) {
      this.#ctx.beginPath()
      this.#ctx.moveTo(x, y)
      this.#ctx.lineTo(x + Math.cos(angle) * 30, y + Math.sin(angle) * 30)
      this.#ctx.stroke()
    }

    animate(timestamp) {
      const deltaTime = timestamp - this.lastTime
      this.lastTime = deltaTime

      if (this.timer > this.interval) {
        this.#ctx.clearRect(0, 0, this.#width, this.#height)
        this.radius += this.radiusVelocity

        if (Math.abs(this.radius) > 10) {
          this.radius *= -1
        }

        for (let y = 0; y < this.#height; y += this.cellSize) {
          for (let x = 0; x < this.#width; x += this.cellSize) {
            const angle = (Math.cos(x * .01) + Math.sin(y * .01)) * this.radius
            this.#drawLine(angle, x, y)
          }
        }

        this.timer = 0
      } else {
        this.timer += deltaTime
      }

      flowFieldAnimation = requestAnimationFrame(this.animate.bind(this))
    }
  }

</script>
</body>
</html>
