---
import MainHead from '../../../components/MainHead.astro';
import Footer from '../../../components/Footer/index.jsx';
import Nav from '../../../components/Nav/index.jsx';
---

<html lang="en">
<head>
  <MainHead title="About | Jeanine White" description="About Jeanine White Lorem Ipsum"/>
  <style lang="scss">
    #canvas {
      height: 100%;
      width: 100%;
      position: absolute;
      top: 0;
      left: 0;
      z-index: -10;
      background: white;
    }
  </style>
</head>
<body>
<Nav/>
<div class="overflow-y-auto overflow-x-hidden">
  <input type="file" id="file">
  <canvas id="canvas"/>
  <img id="result">
</div>

<script>
  let canvas
  let context
  let fileInput
  let resultEl

  window.onload = function () {
    canvas = document.createElement('canvas')
    fileInput = document.getElementById('file')
    resultEl = document.getElementById('result')
    context = canvas.getContext('2d', { alpha: true })
    canvas.width = window.innerWidth
    canvas.height = window.innerHeight

    fileInput.addEventListener('change', async event => {
      const files = event.target.files
      if (!files.length) {
        return alert('You must add a file for the blur to occur.')
      }

      const [file] = files
      const image = new Image();

      image.src = URL.createObjectURL(file);

      await new Promise((res) => (image.onload = res));

      context.imageSmoothingEnabled = true;
      canvas.width = image.width;
      canvas.height = image.height;

      let drawImageArgs
      if (image.height <= image.width) {
        const scaleProportions = canvas.height / image.height;
        const scaledWidth = scaleProportions * image.width;

        drawImageArgs = [
          image,
          (canvas.width - scaledWidth) / 2,
          0,
          scaledWidth,
          canvas.height,
        ];
      } else {
        const scaleProportions = canvas.width / image.width;
        const scaledHeight = scaleProportions * image.height;

        drawImageArgs = [
          image,
          0,
          (canvas.height - scaledHeight) / 2,
          canvas.width,
          scaledHeight,
        ];
      }

      context.filter = 'blur(12px)';
      context.drawImage(...drawImageArgs)

      const resultImg = await new Promise((res) => canvas.toBlob(res))
      resultEl.src = URL.createObjectURL(resultImg)
    })
  }

</script>
</body>
</html>
